import requests
import datetime
import calendar
import json
import os
import yaml
import subprocess
import re
from prettytable import PrettyTable
from collections import defaultdict

class DevOpsChecklist:
    def __init__(self, config_file='config.yml'):
        """Initialize with configuration from YAML file"""
        self.config = self._load_config(config_file)
        
        # Set up GitHub authentication
        self.token = self._get_token()
        
        # Auto-detect repository if configured
        if self.config['repository']['auto_detect']:
            self.repo_owner, self.repo_name = self._detect_repository()
        else:
            self.repo_owner = self.config['repository']['owner']
            self.repo_name = self.config['repository']['name']
            
        # Validate repository information
        if not self.repo_owner or not self.repo_name:
            raise ValueError("Repository information is missing and could not be auto-detected")
            
        self.headers = {
            'Authorization': f'token {self.token}',
            'Accept': 'application/vnd.github.v3+json'
        }
        self.base_url = f'https://api.github.com/repos/{self.repo_owner}/{self.repo_name}'
        self.devops_labels = self.get_devops_labels()
        self.monthly_data = {}  # Store data for each month

    def _load_config(self, config_file):
        """Load configuration from YAML file"""
        try:
            with open(config_file, 'r') as file:
                config = yaml.safe_load(file)
            return config
        except FileNotFoundError:
            print(f"Configuration file {config_file} not found. Using default values.")
            return self._default_config()
        except yaml.YAMLError as e:
            print(f"Error parsing YAML configuration: {e}")
            return self._default_config()
    
    def _default_config(self):
        """Return default configuration if YAML file is not available"""
        return {
            'auth': {'token': ''},
            'repository': {
                'auto_detect': True,
                'owner': '',
                'name': ''
            },
            'labels': {
                'use_custom': False,
                'custom_labels': ["CI/CD", "Infrastructure", "Monitoring", "Security", "Testing"],
                'keywords': ["devops", "ci", "cd", "infra", "monitor", "security", "test", "deploy", "automation"]
            },
            'output': {
                'save_json': True,
                'json_filename': "devops_checklists.json",
                'generate_current_month_only': True
            },
            'display': {
                'show_zeros': True,
                'checkbox_style': True
            }
        }
    
    def _get_token(self):
        """Get GitHub token from config or environment variable"""
        token = self.config['auth']['token']
        # If token uses environment variable syntax (${VAR_NAME})
        if isinstance(token, str) and token.startswith('${') and token.endswith('}'):
            env_var = token[2:-1]
            token = os.environ.get(env_var, '')
            if not token:
                print(f"Warning: Environment variable {env_var} not set. GitHub API access will be limited.")
        return token

    def _detect_repository(self):
        """Detect GitHub repository from current git directory"""
        try:
            # Try to get the remote URL from git
            result = subprocess.run(
                ['git', 'config', '--get', 'remote.origin.url'], 
                capture_output=True, 
                text=True, 
                check=False
            )
            
            if result.returncode != 0:
                print("Warning: Could not detect git repository. No remote origin found.")
                return None, None
                
            remote_url = result.stdout.strip()
            
            # Parse the repository owner and name from the URL
            # Support different URL formats (HTTPS and SSH)
            if "github.com" in remote_url:
                # For HTTPS URLs: https://github.com/owner/repo.git
                if remote_url.startswith("https://"):
                    match = re.search(r'github\.com/([^/]+)/([^/\.]+)', remote_url)
                    if match:
                        return match.group(1), match.group(2)
                
                # For SSH URLs: git@github.com:owner/repo.git
                elif remote_url.startswith("git@"):
                    match = re.search(r'github\.com:([^/]+)/([^/\.]+)', remote_url)
                    if match:
                        return match.group(1), match.group(2)
            
            print(f"Warning: Could not parse GitHub repository from URL: {remote_url}")
            return None, None
            
        except Exception as e:
            print(f"Error detecting repository: {e}")
            return None, None

    def get_devops_labels(self):
        """Get DevOps related labels from GitHub repository based on configuration"""
        # Use custom labels if specified
        if self.config['labels']['use_custom']:
            return self.config['labels']['custom_labels']
        
        # Otherwise, fetch labels from repository
        url = f'{self.base_url}/labels'
        response = requests.get(url, headers=self.headers)
        
        if response.status_code != 200:
            print(f"Error fetching labels: {response.status_code}")
            return self.config['labels']['custom_labels']  # Fallback to custom labels
        
        all_labels = response.json()
        # Filter for DevOps-related labels using configured keywords
        keywords = self.config['labels']['keywords']
        devops_labels = [label['name'] for label in all_labels 
                         if any(keyword in label['name'].lower() for keyword in keywords)]
        
        # If no DevOps labels found, use default ones
        if not devops_labels:
            devops_labels = self.config['labels']['custom_labels']
            
        return devops_labels

    def get_week_boundaries(self, year, month):
        """Calculate the boundaries for each week in a month"""
        cal = calendar.monthcalendar(year, month)
        weeks = []
        
        for week_num, week in enumerate(cal, 1):
            if week_num > 4:  # Only consider first 4 weeks
                break
                
            # Find first and last day of this week (excluding zeros)
            days = [day for day in week if day != 0]
            if days:
                start_day = min(days)
                end_day = max(days)
                
                start_date = datetime.date(year, month, start_day)
                end_date = datetime.date(year, month, end_day)
                
                weeks.append({
                    'week_num': week_num,
                    'start_date': start_date,
                    'end_date': end_date
                })
        
        return weeks

    def get_completed_issues(self, label, start_date, end_date):
        """Get number of completed issues for a specific label in date range"""
        url = f'{self.base_url}/issues'
        
        # Format dates for GitHub API
        start_str = start_date.isoformat()
        end_str = end_date.isoformat()
        
        params = {
            'labels': label,
            'state': 'closed',
            'since': start_str,
            'until': end_str,
            'per_page': 100
        }
        
        response = requests.get(url, headers=self.headers, params=params)
        
        if response.status_code != 200:
            print(f"Error fetching issues: {response.status_code}")
            return 0
            
        issues = response.json()
        return len(issues)

    def generate_month_data(self, year, month):
        """Generate data for a specific month"""
        month_name = calendar.month_name[month]
        month_key = f"{year}-{month:02d}"
        
        # Initialize data structure for this month
        self.monthly_data[month_key] = {
            'year': year,
            'month': month,
            'month_name': month_name,
            'weeks': self.get_week_boundaries(year, month),
            'data': defaultdict(lambda: {'weeks': [0, 0, 0, 0], 'total': 0})
        }
        
        # For each DevOps label and week, get completed issues
        for label in self.devops_labels:
            for i, week in enumerate(self.monthly_data[month_key]['weeks']):
                if i < 4:  # Ensure we only process 4 weeks
                    count = self.get_completed_issues(
                        label, 
                        week['start_date'], 
                        week['end_date']
                    )
                    
                    self.monthly_data[month_key]['data'][label]['weeks'][i] = count
                    self.monthly_data[month_key]['data'][label]['total'] += count
        
        return self.monthly_data[month_key]

    def display_month_checklist(self, year, month):
        """Display checklist for a specific month"""
        # Generate data if it doesn't exist
        month_key = f"{year}-{month:02d}"
        if month_key not in self.monthly_data:
            self.generate_month_data(year, month)
            
        month_data = self.monthly_data[month_key]
        
        # Create table
        table = PrettyTable()
        table.field_names = ["DevOps Area", "Week 1", "Week 2", "Week 3", "Week 4", "Total"]
        
        # Add rows
        for label in self.devops_labels:
            if label in month_data['data']:
                weeks_data = month_data['data'][label]['weeks']
                total = month_data['data'][label]['total']
                
                # Format each cell with count and checkbox based on configuration
                week_cells = []
                for count in weeks_data:
                    if self.config['display']['checkbox_style']:
                        checkbox = "[x]" if count > 0 else "[ ]"
                        week_cells.append(f"{checkbox} ({count})")
                    else:
                        week_cells.append(str(count))
                
                table.add_row([label] + week_cells + [total])
        
        print(f"\n{month_data['month_name']} {month_data['year']} DevOps Checklist")
        print(f"Repository: {self.repo_owner}/{self.repo_name}")
        print(table)
        
        return table

    def save_to_json(self):
        """Save all monthly data to JSON file"""
        if self.config['output']['save_json']:
            filename = self.config['output']['json_filename']
            with open(filename, 'w') as f:
                # Include repository info in the saved data
                data_to_save = {
                    'repository': {
                        'owner': self.repo_owner,
                        'name': self.repo_name
                    },
                    'data': self.monthly_data
                }
                json.dump(data_to_save, f, indent=2, default=str)
            print(f"Data saved to {filename}")

    def load_from_json(self):
        """Load monthly data from JSON file"""
        filename = self.config['output']['json_filename']
        if os.path.exists(filename):
            with open(filename, 'r') as f:
                data = json.load(f)
            
            # Handle both old and new format JSON files
            if 'data' in data and 'repository' in data:
                # New format
                saved_repo = data.get('repository', {})
                if saved_repo.get('owner') != self.repo_owner or saved_repo.get('name') != self.repo_name:
                    print(f"Warning: Loading data from different repository ({saved_repo.get('owner')}/{saved_repo.get('name')})")
                
                monthly_data = data['data']
            else:
                # Old format (just monthly data)
                monthly_data = data
                
            # Convert back to our expected structure
            for month_key, month_data in monthly_data.items():
                # Convert string dates back to datetime
                for week in month_data['weeks']:
                    week['start_date'] = datetime.datetime.fromisoformat(week['start_date']).date()
                    week['end_date'] = datetime.datetime.fromisoformat(week['end_date']).date()
                
                # Convert defaultdict
                month_data['data'] = defaultdict(lambda: {'weeks': [0, 0, 0, 0], 'total': 0}, 
                                               month_data['data'])
                
            self.monthly_data = monthly_data
            print(f"Data loaded from {filename}")
        else:
            print(f"File {filename} not found")

    def generate_current_month(self):
        """Generate checklist for current month"""
        today = datetime.date.today()
        return self.generate_month_data(today.year, today.month)

    def generate_all_months_this_year(self):
        """Generate checklists for all months of current year"""
        today = datetime.date.today()
        year = today.year
        
        for month in range(1, 13):
            self.generate_month_data(year, month)
            
    def print_repository_info(self):
        """Print current repository information"""
        print(f"Working with GitHub repository: {self.repo_owner}/{self.repo_name}")
        print(f"DevOps labels being tracked: {', '.join(self.devops_labels)}")

# Example usage
if __name__ == "__main__":
    try:
        # Create instance using configuration file
        checklist = DevOpsChecklist('config.yml')
        
        # Print repository information
        checklist.print_repository_info()
        
        # Try to load existing data first
        checklist.load_from_json()
        
        # Generate data based on configuration
        if checklist.config['output']['generate_current_month_only']:
            current_month_data = checklist.generate_current_month()
            checklist.display_month_checklist(current_month_data['year'], current_month_data['month'])
        else:
            checklist.generate_all_months_this_year()
            # Display current month
            today = datetime.date.today()
            checklist.display_month_checklist(today.year, today.month)
        
        # Save data to JSON
        checklist.save_to_json()
        
    except Exception as e:
        print(f"Error: {e}")
        print("\nMake sure to:")
        print("1. Set your GitHub token as environment variable: export GITHUB_TOKEN=your_token")
        print("2. Run this script from within a git repository that's connected to GitHub")
        print("3. Or configure repository details manually in config.yml")
